generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  username          String             @unique @db.VarChar(255)
  password          String             @db.VarChar(255)
  email             String?            @unique @db.VarChar(255)
  role              String?            @db.VarChar(255)
  posts             Post[]
  comments          Comment[]
  followers         Follow[]           @relation("following")
  following         Follow[]           @relation("follower")
  conversationUsers ConversationUser[]
  messages          Message[]
}

model Conversation {
  id                Int                @id @default(autoincrement())
  name              String?
  isGroup           Boolean            @default(false)
  joinCode          String?            @unique
  messages          Message[]
  createdAt         DateTime           @default(now())
  conversationUsers ConversationUser[]
}

model ConversationUser {
  userId         Int
  conversationId Int
  joinedAt       DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String       @db.Text
  senderId       Int
  conversationId Int
  sender         User         @relation(fields: [senderId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
}

model Post {
  id        Int       @id @default(autoincrement())
  caption   String    @db.Text
  userId    Int       @db.Int
  imageUrl  String?   @db.Text
  createdBy User      @relation(fields: [userId], references: [id])
  comments  Comment[]
}

model Comment {
  id     Int    @id @default(autoincrement())
  body   String @db.Text
  userId Int    @db.Int
  postId Int    @db.Int
  author User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
}

model Follow {
  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  @@id([followerId, followingId])
}
